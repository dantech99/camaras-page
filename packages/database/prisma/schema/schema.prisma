generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "../../generated/database"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id

  // Información general
  name         String
  image        String?
  description  String?
  facebookUrl  String?
  instagramUrl String?
  tiktokUrl    String?

  // Información adicional
  nameTag     String?
  website     String?
  location    String?
  phoneNumber String?

  // Better Auth 
  email               String
  emailVerified       Boolean
  phoneNumberVerified Boolean?
  isAnonymous         Boolean?
  role                String?
  banned              Boolean?
  banReason           String?
  banExpires          DateTime?

  // Relaciones
  accounts          Account[]
  sessions          Session[]
  members           Member[]
  invitations       Invitation[]
  auditLogs         AuditLog[]     @relation("AuditLogActor")
  receivedAuditLogs AuditLog[]     @relation("AuditLogTarget")
  availableDays     AvailableDay[]
  sales             Sale[]
  packages          Package[]
  discounts         Discount[]     @relation("discountPhotographer")

  cancelledSales Sale[] @relation("cancelledBy")

  createdAt DateTime
  updatedAt DateTime

  @@unique([email])
  @@unique([phoneNumber])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?
  impersonatedBy       String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
