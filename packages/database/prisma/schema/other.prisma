enum AuditAction {
  ROLE_UPDATE
  DISCOUNT_CREATED
  PACKAGE_UPDATED
  FUNDS_TRANSFER
  USER_STATUS_CHANGED
  PACKAGE_CREATED
  DISCOUNT_DEACTIVATED
  TRANSACTION_REFUND
}

enum AuditEntity {
  USER
  DISCOUNT
  PACKAGE
  TRANSACTION
  ORGANIZATION
}

model AuditLog {
  id         String      @id @default(uuid())
  actor      User        @relation("AuditLogActor", fields: [actorId], references: [id])
  actorId    String
  action     AuditAction
  entityType AuditEntity
  entityId   String
  details    Json?
  createdAt  DateTime    @default(now())

  // Para cambios que afectan a otro usuario (ej. cambio de rol)
  targetUser   User?   @relation("AuditLogTarget", fields: [targetUserId], references: [id])
  targetUserId String?
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  @@index([entityType])
  @@index([action])
  @@map("audit_log")
}

model Package {
  id                 String           @id @default(uuid())
  photographerName   String
  name               String
  description        String
  imageUrl           String
  price              Float
  photoCount         Int              @default(0)
  discountPercentage Float            @default(0)
  features           PackageFeature[]
  isActive           Boolean          @default(true)
  deletedAt          DateTime?

  @@map("package")
}

model PackageFeature {
  id        String  @id @default(uuid())
  packageId String
  content   String
  package   Package @relation(fields: [packageId], references: [id])

  @@map("package_feature")
}

model Discount {
  id                 String   @id @default(uuid())
  code               String   @unique
  discountPercentage Float
  expirationDate     DateTime
  photographerName   String
  isActive           Boolean  @default(true)
  createdat          DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map("discount")
}

model AvailableDay {
  id          String     @id @default(uuid())
  date        String
  isAvailable Boolean    @default(true)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  timeSlots   TimeSlot[]

  @@map("available_day")
}

model TimeSlot {
  id             String       @id @default(uuid())
  start          String
  end            String
  ampmStart      String
  ampmEnd        String
  isBooked       Boolean      @default(false)
  availableDayId String
  availableDay   AvailableDay @relation(fields: [availableDayId], references: [id])

  @@map("time_slot")
}
