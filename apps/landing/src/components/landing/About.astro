---
// Component props interface
export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<section 
  class={`h-screen flex flex-col items-center justify-center p-8 md:p-24 ${className}`}
  data-reveal-section
>
  <div class="flex flex-col items-start justify-start gap-4 border-b border-primary-blue pb-16">
    <h2 class="text-6xl font-unbounded font-semibold text-primary-blue reveal-text" data-reveal>
      SIEMPRE A LA VANGUARDIA DE LA MEJORA E INNOVACIÓN Y MEJORA
    </h2>
    <p class="text-4xl font-semibold font-unbounded max-w-2/3 reveal-text" data-reveal>
      - NEFTALI HERNANDEZ
    </p>
  </div>
  <div class="grid grid-cols-1 md:grid-cols-7 gap-8 md:gap-16 mt-16">
    <p class="col-span-3 text-lg font-semibold text-primary-blue font-unbounded reveal-text" data-reveal>
      "Aspiramos a ser lo mejor que te puedas imaginar, porque nuestros limites
      no están en nuestras habilidades, sino que nuestra creatividad nos impulsa
      a ir más allá."
    </p>
    <section class="col-span-2 space-y-4">
      <p class="text-3xl font-semibold text-primary-blue font-unbounded reveal-text" data-reveal>
        UN TITULO EN FONT BOLD PARA P1
      </p>
      <p class="reveal-text" data-reveal>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Minima aut
        ratione ab impedit quos vitae error tempora ea quasi saepe, suscipit
        aliquid, deleniti reprehenderit consectetur eaque soluta odio nostrum
        possimus recusandae at ex fugit, earum natus. Unde, ab esse nesciunt
        excepturi blanditiis perspiciatis, consequuntur et neque enim dolores
        minima architecto obcaecati voluptatem alias aliquam magnam officiis
        laboriosam autem maiores ratione omnis illo? Reprehenderit soluta
        mollitia perferendis officia fuga blanditiis aut recusandae odio maiores
        veritatis.
      </p>
    </section>
    <section class="col-span-2 space-y-4">
      <p class="text-3xl font-semibold text-primary-blue font-unbounded reveal-text" data-reveal>
        UN TITULO EN FONT BOLD PARA P2
      </p>
      <p class="reveal-text" data-reveal>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Minima aut
        ratione ab impedit quos vitae error tempora ea quasi saepe, suscipit
        aliquid, deleniti reprehenderit consectetur eaque soluta odio nostrum
        possimus recusandae at ex fugit, earum natus. Unde, ab esse nesciunt
        excepturi blanditiis perspiciatis, consequuntur et neque enim dolores
        minima architecto obcaecati voluptatem alias aliquam magnam officiis
        laboriosam autem maiores ratione omnis illo? Reprehenderit soluta
        mollitia perferendis officia fuga blanditiis aut recusandae odio maiores
        veritatis.
      </p>
    </section>
  </div>
</section>

<style>
  .reveal-text {
    position: relative;
    overflow: hidden;
  }

  .reveal-text::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #47b7e4; /* Ajusta este color según tu primary-blue */
    transform: translateX(0%);
    transition: transform 0.8s cubic-bezier(0.77, 0, 0.175, 1);
    z-index: 1;
  }

  .reveal-text.revealed::before {
    transform: translateX(-100%);
  }

  .reveal-text > * {
    position: relative;
    z-index: 2;
  }

  /* Variantes de delay para crear efecto escalonado */
  .reveal-text:nth-child(1)::before {
    transition-delay: 0s;
  }

  .reveal-text:nth-child(2)::before {
    transition-delay: 0.1s;
  }

  .reveal-text:nth-child(3)::before {
    transition-delay: 0.2s;
  }

  .reveal-text:nth-child(4)::before {
    transition-delay: 0.3s;
  }

  .reveal-text:nth-child(5)::before {
    transition-delay: 0.4s;
  }

  .reveal-text:nth-child(6)::before {
    transition-delay: 0.5s;
  }
</style>

<script>
  // Definir tipos para TypeScript
  interface RevealElement extends HTMLElement {
    dataset: DOMStringMap & {
      reveal: string;
    };
  }

  interface IntersectionObserverInit {
    root?: Element | null;
    rootMargin?: string;
    threshold?: number | number[];
  }

  // Función para manejar la animación de reveal
  function initRevealAnimation(): void {
    const revealElements: NodeListOf<RevealElement> = document.querySelectorAll('[data-reveal]');
    
    if (revealElements.length === 0) return;

    // Configuración del Intersection Observer
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: '0px 0px -20% 0px', // Trigger cuando el elemento esté 20% visible
      threshold: 0.1
    };

    // Callback del observer
    const observerCallback = (entries: IntersectionObserverEntry[]): void => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting) {
          const target = entry.target as RevealElement;
          // Pequeño delay para asegurar que la animación se vea
          setTimeout(() => {
            target.classList.add('revealed');
          }, 100);
          
          // Dejar de observar el elemento una vez que se ha revelado
          observer.unobserve(target);
        }
      });
    };

    // Crear el observer
    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observar todos los elementos
    revealElements.forEach((element: RevealElement) => {
      observer.observe(element);
    });
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initRevealAnimation);
  } else {
    initRevealAnimation();
  }

  // Reinicializar si hay navegación del lado del cliente (para SPAs)
  document.addEventListener('astro:page-load', initRevealAnimation);
</script>